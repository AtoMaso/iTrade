/// <reference path="../../../typings/tsd.d.ts" />
import {Component, Directive, NgZone } from 'angular2/core';
import { CORE_DIRECTIVES, FORM_DIRECTIVES, NgClass, NgStyle } from 'angular2/common';
import { Http, HTTP_PROVIDERS, Response } from 'angular2/http';
import { RouteParams, ROUTER_DIRECTIVES} from 'angular2/router';

import { MultipartItem } from "../../plugins/multipart-upload/multipart-item";
import { MultipartUploader } from "../../plugins/multipart-upload/multipart-uploader";

const URL = 'http://localhost:5500/api/uploads';

@Component({
    selector: 'simple-uploader',   
    templateUrl: './app/views/file-upload/multi-upload.component.html',
    styles:  ['multi-upload.component.css'], 
    directives: [NgClass, NgStyle, CORE_DIRECTIVES, FORM_DIRECTIVES]
})

export class MultiUploadComponent {
    
    // multi part code
    private uploaderMulti: MultipartUploader = new MultipartUploader({ url: URL });
    private multipartItem: MultipartItem = new MultipartItem(this.uploaderMulti);
    private email: string;
    private password: string;
    private file: File;
    private zone: NgZone;
    private basicProgress: number = 0;
    private basicResp: Object;
    private upload: () => void;
    private uploadCallback: (data) => void;   
    constructor() {     
        this.zone = new NgZone({ enableLongStackTrace: false });
                
        this.upload = () => {
            //console.debug("upload.component.ts & upload() ==>");
            if (null == this.file) // || null == this.email || null == this.password) 
            {
                console.error("upload.component.ts & upload() form invalid.");
                return;
            }

            if (this.multipartItem == null) {
                this.multipartItem = new MultipartItem(this.uploaderMulti);
            }
            if (this.multipartItem.formData == null)
                this.multipartItem.formData = new FormData();
            // TODO ADDED FALSE CREDENTIALS
            this.multipartItem.withCredentials = false;
            this.multipartItem.formData.append("email", this.email);
            this.multipartItem.formData.append("password", this.password);
            this.multipartItem.formData.append("file", this.file);
            this.multipartItem.callback = this.uploadCallback;
            this.multipartItem.upload();           
        }

        this.uploadCallback = (data) => {
            let message: string = "";
            //console.debug("upload.component.ts & uploadCallback() ==>");
            this.file = null;
            if (data) {
                message = "File upload success.";
            } else {
                message = "File upload failed.";
            }
            this.basicResp = message;
        }
    }

    private selectFile($event): void {
        var inputValue = $event.target;
        if (null == inputValue || null == inputValue.files[0]) {
            //console.debug("Input file error.");
            return;
        } else {
            this.file = inputValue.files[0];
            //console.debug("Input File name: " + this.file.name + " type:"
            //    + this.file.size + " size:" + this.file.size);
        }
    }
}

   


// LIVE CYCLE OF A COMPONENT
//ngOnInit() {
//    // Properties are resolved and things like
//    // this.mapWindow and this.mapControls
//    // had a chance to resolve from the
//    // two child components <map-window> and <map-controls>
//}
//ngOnDestroy() {
//    // Speak now or forever hold your peace
//}
//ngDoCheck() {
//    // Custom change detection
//}
//ngOnChanges(changes) {
//    // Called right after our bindings have been checked but only
//    // if one of our bindings has changed.
//    //
//    // changes is an object of the format:
//    // {
//    //   'prop': PropertyUpdate
//    // }
//}
//ngAfterContentInit() {
//    // Component content has been initialized
//}
//ngAfterContentChecked() {
//    // Component content has been Checked
//}
//ngAfterViewInit() {
//    // Component views are initialized
//}
//ngAfterViewChecked() {
//    // Component views have been checked
//}

